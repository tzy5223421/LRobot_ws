#ifndef LRobotController_HPP_
#define LRobotController_HPP_

#include <chrono>
#include <cmath>
#include <memory>
#include <queue>
#include <string>
#include <vector>

#include "controller_interface/controller_interface.hpp"

#include "geometry_msgs/msg/twist.hpp"
#include "hardware_interface/handle.hpp"
#include "rclcpp/rclcpp.hpp"
#include "rclcpp_lifecycle/state.hpp"
#include "realtime_tools/realtime_box.h"
#include "realtime_tools/realtime_buffer.h"
#include "realtime_tools/realtime_publisher.h"
#include "nav_msgs/msg/odometry.hpp"
#include "tf2_msgs/msg/tf_message.hpp"

#include "odometry.hpp"
#include "visibility_control.h"
// auto-generated by generate_parameter_library
#include <lrobot_controller_parameters.hpp>
// #include <std_srvs/srv/set_bool.hpp>
#include <diagnostic_msgs/msg/diagnostic_status.hpp>
#include <sensor_msgs/msg/joint_state.hpp>
#include <std_srvs/srv/set_bool.hpp>
#include <canopen_interfaces/msg/co_data.hpp>
#include <std_srvs/srv/trigger.hpp>

typedef struct
{
  bool Omnidirectional;
  bool CarLink;
} RobotMotionMode;

typedef struct
{
  bool Manual;
  bool Autonomous;
} RobotDriverMode;

namespace lrobot_controller
{

  class LRobotController : public controller_interface::ControllerInterface
  {
    using Twist = geometry_msgs::msg::Twist;

  public:
    LROBOT_CONTROLLER_PUBLIC
    LRobotController();

    LROBOT_CONTROLLER_PUBLIC
    controller_interface::InterfaceConfiguration command_interface_configuration() const override;

    LROBOT_CONTROLLER_PUBLIC
    controller_interface::InterfaceConfiguration state_interface_configuration() const override;

    LROBOT_CONTROLLER_PUBLIC
    controller_interface::return_type update(
        const rclcpp::Time &time,
        const rclcpp::Duration &period) override;

    LROBOT_CONTROLLER_PUBLIC
    controller_interface::return_type updateCommand(const rclcpp::Time &time, const rclcpp::Duration &period);

    LROBOT_CONTROLLER_PUBLIC
    controller_interface::return_type updateOdometry(const rclcpp::Time &time, const rclcpp::Duration &period);

    LROBOT_CONTROLLER_PUBLIC
    controller_interface::CallbackReturn on_init() override;

    LROBOT_CONTROLLER_PUBLIC
    controller_interface::CallbackReturn on_configure(const rclcpp_lifecycle::State &previous_state)
        override;

    LROBOT_CONTROLLER_PUBLIC
    controller_interface::CallbackReturn on_activate(const rclcpp_lifecycle::State &previous_state)
        override;

    LROBOT_CONTROLLER_PUBLIC
    controller_interface::CallbackReturn on_deactivate(const rclcpp_lifecycle::State &previous_state)
        override;

    LROBOT_CONTROLLER_PUBLIC
    controller_interface::CallbackReturn on_cleanup(const rclcpp_lifecycle::State &previous_state)
        override;

    LROBOT_CONTROLLER_PUBLIC
    controller_interface::CallbackReturn on_error(const rclcpp_lifecycle::State &previous_state)
        override;

    LROBOT_CONTROLLER_PUBLIC
    controller_interface::CallbackReturn on_shutdown(const rclcpp_lifecycle::State &previous_state)
        override;

  protected:
    struct WheelHandle
    {
      std::reference_wrapper<const hardware_interface::LoanedStateInterface> feedback;
      std::reference_wrapper<hardware_interface::LoanedCommandInterface> velocity;
    };

    controller_interface::CallbackReturn configure_side(
        const std::string &wheel_kind,
        const std::vector<std::string> &wheel_names,
        std::vector<WheelHandle> &registered_handles);

    // std::vector<WheelHandle> registered_front_wheel_handles_;
    // std::vector<WheelHandle> registered_back_wheel_handles_;
    // std::vector<WheelHandle> registered_front_motor_handles_;
    // std::vector<WheelHandle> registered_back_motor_handles_;

    controller_interface::InterfaceConfiguration command_interfaces_config_;
    controller_interface::InterfaceConfiguration state_interfaces_config_;

    bool isreach = true;

    // 里程计
    Odometry odometry_;
    // 发布里程计数据
    std::shared_ptr<rclcpp::Publisher<nav_msgs::msg::Odometry>> odometry_publisher_ = nullptr;
    std::shared_ptr<realtime_tools::RealtimePublisher<nav_msgs::msg::Odometry>>
        realtime_odometry_publisher_ = nullptr;

    std::shared_ptr<rclcpp::Publisher<canopen_interfaces::msg::COData>> canopen_front_wheel_publisher_ = nullptr;
    std::shared_ptr<realtime_tools::RealtimePublisher<canopen_interfaces::msg::COData>> realtime_canopen_front_wheel_publisher_ = nullptr;

    std::shared_ptr<rclcpp::Publisher<sensor_msgs::msg::JointState>> joint_publisher_ = nullptr;
    std::shared_ptr<realtime_tools::RealtimePublisher<sensor_msgs::msg::JointState>> realtime_joint_publisher_ = nullptr;

    rclcpp::Service<std_srvs::srv::SetBool>::SharedPtr manual_mode_;
    bool manual_handle_service(
        const std::shared_ptr<std_srvs::srv::SetBool::Request> request,
        std_srvs::srv::SetBool::Response::SharedPtr response);

    rclcpp::Service<std_srvs::srv::SetBool>::SharedPtr motion_mode_;
    bool motion_handle_service(
        const std::shared_ptr<std_srvs::srv::SetBool::Request> request,
        std_srvs::srv::SetBool::Response::SharedPtr response);

    // 发布坐标变化关系
    std::shared_ptr<rclcpp::Publisher<tf2_msgs::msg::TFMessage>> odometry_transform_publisher_ =
        nullptr;
    std::shared_ptr<realtime_tools::RealtimePublisher<tf2_msgs::msg::TFMessage>>
        realtime_odometry_transform_publisher_ = nullptr;

    std::shared_ptr<rclcpp::Publisher<diagnostic_msgs::msg::DiagnosticStatus>> vehicle_control_publisher_ = nullptr;
    std::shared_ptr<realtime_tools::RealtimePublisher<diagnostic_msgs::msg::DiagnosticStatus>> realtime_control_publisher_ = nullptr;

    // Parameters from ROS for LRobotController
    std::shared_ptr<lrobot_controller::ParamListener> param_listener_;
    lrobot_controller::Params params_;

    // received command
    bool subscriber_is_active_ = false;
    rclcpp::Subscription<geometry_msgs::msg::Twist>::SharedPtr velocity_command_subscriber_ = nullptr;
    realtime_tools::RealtimeBox<std::shared_ptr<geometry_msgs::msg::Twist>> received_velocity_msg_ptr_{nullptr};
    std::queue<geometry_msgs::msg::Twist> previous_commands_; // last two commands

    rclcpp::Client<std_srvs::srv::Trigger>::SharedPtr init_client_;

    rclcpp::TimerBase::SharedPtr timer_;
    void activate();

    // x speed, positive means forward,unit m/s. 速度 X方向 前为正
    // z rotation speed, positive means counterclockwise,unit
    // rad/s.Yaw旋转角速度，逆时针为正 单位 rad/s
    double linear_command;
    double angular_command;

    bool is_halted = false;
    bool reset();
    void halt();
    RobotMotionMode robotmotionMode;
    RobotDriverMode robotdriverMode;
  };

} // namespace LRobotController

#endif /* LRobotController_HPP_ */
